{"version":3,"sources":["PdfViewer.js","Viewer.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync","logo.svg"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","options","cMapUrl","cMapPacked","PdfViewer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDocumentLoadSuccess","pdf","getPage","then","page","viewport","getViewport","setState","numPages","itemScale","height","width","loaded","state","_this2","react_default","a","createElement","react_measure_dist_index_esm","bounds","onResize","contentRect","_ref","measureRef","className","style","display","position","ref","entry","file","onLoadSuccess","noData","loading","dist_index_esm","itemSize","itemCount","_ref2","index","pageNumber","renderAnnotationLayer","Component","Viewer","componentWillMount","vSplit","split","hSplit","lClose","close","handle","size","allowResize","resizerStyle","lr","rClose","onFileChange","event","target","files","id","_","uniqueId","background","textAlign","onClick","type","onChange","htmlFor","PdfViewer_PdfViewer","index_esm","paneStyle","pane2Style","onDragFinished","update","flex","App","updateWindowDimensions","bind","assertThisInitialized","window","addEventListener","removeEventListener","innerWidth","innerHeight","src_Viewer","pageIndex","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","__webpack_require__","p"],"mappings":"mPAKAA,QAAMC,oBAAoBC,UAAY,gBAGtC,IAAMC,EAAU,CACdC,QAAS,SACTC,YAAY,GAGOC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaZQ,sBAAwB,SAACC,GACPA,EAAIC,QAAQ,GACpBC,KAAK,SAAAC,GACT,IAAMC,EAAWD,EAAKE,YAAY,GAClCb,EAAKc,SAAS,CACVC,SAAUP,EAAIO,SACdC,UAAWJ,EAASK,OAAOL,EAASM,MACpCC,QAAQ,OAlBZnB,EAAKoB,MAAQ,CACTZ,IAAK,KACLO,SAAU,KACVG,MAAO,EACPD,OAAQ,EACRD,UAAW,EACXG,QAAQ,GATGnB,wEA0BZ,IAAAqB,EAAAlB,KACP,OACImB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,QAAM,EACNC,SAAU,SAAAC,GACNP,EAAKP,SAAS,CACVI,MAAOU,EAAYF,OAAOR,MAC1BD,OAAQW,EAAYF,OAAOT,WAItC,SAAAY,GAAA,IAAEC,EAAFD,EAAEC,WAAF,OACDR,EAAAC,EAAAC,cAAA,OACIO,UAAU,SACVC,MAAO,CAACd,MAAO,OAAQD,OAAQ,OAAQgB,QAAS,QAASC,SAAU,YACnEC,IAAKL,GAETR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,sBACbT,EAAAC,EAAAC,cAACY,EAAA,SAAD,CACEC,KAAMhB,EAAKtB,MAAMsC,KACjBC,cAAejB,EAAKd,sBACpBZ,QAASA,EACT4C,OAAO,GACPC,QAAQ,IAEPnB,EAAKD,MAAMD,OACRG,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACIxB,OAAQI,EAAKD,MAAMH,OACnBC,MAAOG,EAAKD,MAAMF,MAClBwB,SAAUrB,EAAKD,MAAMJ,UAAYK,EAAKD,MAAMF,MAC5CyB,UAAWtB,EAAKD,MAAML,UAErB,SAAA6B,GAAA,IAAGZ,EAAHY,EAAGZ,MAAOa,EAAVD,EAAUC,MAAV,OACGvB,EAAAC,EAAAC,cAAA,OAAKQ,MAAOA,GACRV,EAAAC,EAAAC,cAACY,EAAA,KAAD,CACIU,WAAYD,EAAQ,EACpB3B,MAAOG,EAAKD,MAAMF,MAClB6B,uBAAuB,EACvBP,QAAQ,QAK5B,iBAtE2BQ,8BCkHxBC,cAzHb,SAAAA,EAAYlD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACjBjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KAaRmD,mBAAqB,WACK,OAApBlD,EAAKD,MAAMsC,MACbrC,EAAKc,SAAS,iBAAO,CACnBuB,KAAMrC,EAAKD,MAAMsC,SAjBJrC,EAsBnBmD,OAAS,WACPnD,EAAKc,SAAS,iBAAO,CACnBsC,MAAO,eAxBQpD,EA4BnBqD,OAAS,WACPrD,EAAKc,SAAS,iBAAO,CACnBsC,MAAO,iBA9BQpD,EAkCnBsD,OAAS,WACHtD,EAAKoB,MAAMmC,OAAS,GACtBvD,EAAKD,MAAMyD,SAEbxD,EAAKc,SAAS,SAACM,GAAD,MAAY,CACxBqC,KAAM,KACNC,aAAa,EACbC,aAAc,CACZ1B,QAAS,QAEX2B,GAAI,OACJL,MAAOnC,EAAMmC,MAAQ,MA7CNvD,EAiDnB6D,OAAS,WACH7D,EAAKoB,MAAMmC,OAAS,GACtBvD,EAAKD,MAAMyD,SAEbxD,EAAKc,SAAS,SAACM,GAAD,MAAY,CACxBqC,KAAM,OACNC,aAAa,EACbC,aAAc,CACZ1B,QAAS,QAEX2B,GAAI,QACJL,MAAOnC,EAAMmC,MAAQ,MA5DNvD,EAgEnB8D,aAAe,SAACC,GACd/D,EAAKc,SAAS,CACZuB,KAAM0B,EAAMC,OAAOC,MAAM,MA/D3BjE,EAAKoB,MAAQ,CACXgC,MAAO,GACPK,KAAM,MACNE,aAAc,GACdD,aAAa,EACbH,MAAO,EACPK,GAAI,GACJvB,KAAM,MAVSrC,wEAuEjB,IAAMkE,EAAKC,IAAEC,WACb,OACI9C,EAAAC,EAAAC,cAAA,WACsB,KAArBrB,KAAKiB,MAAMgC,MACV9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAACqC,WAAY,QAASC,UAAW,WAC3ChD,EAAAC,EAAAC,cAAA,UAAQ+C,QAASpE,KAAKgD,OAAQnB,MAAO,CAACqC,WAAY,eAClD/C,EAAAC,EAAAC,cAAA,UAAQ+C,QAASpE,KAAKkD,OAAQrB,MAAO,CAACqC,WAAY,gBAClD/C,EAAAC,EAAAC,cAAA,UAAQ+C,QAASpE,KAAKJ,MAAMwD,MAAOvB,MAAO,CAACqC,WAAY,eACvD/C,EAAAC,EAAAC,cAAA,SACEgD,KAAK,OACLC,SAAUtE,KAAK2D,aACf9B,MAAO,CAACC,QAAS,QACjBiC,GAAIA,IAEN5C,EAAAC,EAAAC,cAAA,SAAOkD,QAASR,EAAIlC,MAAO,CAACqC,WAAY,gBAE1C/C,EAAAC,EAAAC,cAACmD,EAAD,CACEtC,KAAMlC,KAAKiB,MAAMiB,QAGrBf,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACExB,MAAOjD,KAAKiB,MAAMgC,MAClBK,KAAMtD,KAAKiB,MAAMqC,KACjBE,aAAcxD,KAAKiB,MAAMuC,aACzBkB,UAAW,CAACR,WAAY,SACxBS,WAAiC,aAArB3E,KAAKiB,MAAMgC,MAAuB,CAAClC,MAAO,MAAQ,KAC9DwC,YAAavD,KAAKiB,MAAMsC,YACxBqB,eAAgB5E,KAAK6E,QAEF,SAAlB7E,KAAKiB,MAAMwC,GAAgBtC,EAAAC,EAAAC,cAAA,YAC5BF,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAACiD,KAAM,IACjB3D,EAAAC,EAAAC,cAACyB,EAAD,CACEM,MAAOpD,KAAKmD,OACZE,OAAQrD,KAAK0D,OACbxB,KAAMlC,KAAKiB,MAAMiB,QAGF,UAAlBlC,KAAKiB,MAAMwC,GAAiBtC,EAAAC,EAAAC,cAAA,YAC7BF,EAAAC,EAAAC,cAACyB,EAAD,CACEM,MAAOpD,KAAK0D,OACZL,OAAQrD,KAAKmD,OACbjB,KAAMlC,KAAKiB,MAAMiB,gBAlHVW,aC+CNkC,sBA5Cb,SAAAA,IAAc,IAAAlF,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,IACZlF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiF,GAAA5E,KAAAH,QAsBFqD,OAAS,aArBPxD,EAAKoB,MAAQ,CACXF,MAAO,EACPD,OAAQ,EACRsC,OAAO,GAETvD,EAAKmF,uBAAyBnF,EAAKmF,uBAAuBC,KAA5BnF,OAAAoF,EAAA,EAAApF,QAAAoF,EAAA,EAAApF,CAAAD,KAPlBA,mFAWZG,KAAKgF,yBACLG,OAAOC,iBAAiB,SAAUpF,KAAKgF,uEAIvCG,OAAOE,oBAAoB,SAAUrF,KAAKgF,yEAI1ChF,KAAKW,SAAS,CAAEI,MAAOoE,OAAOG,WAAYxE,OAAQqE,OAAOI,+CAOzD,OACEpE,EAAAC,EAAAC,cAAA,WACCrB,KAAKiB,MAAMmC,MAAQ,KACpBjC,EAAAC,EAAAC,cAACmE,EAAD,CACEnC,OAAQrD,KAAKqD,OACbvC,OAAQd,KAAKiB,MAAMH,OACnB2E,UAAW,EACXvD,KAAM,eAnCIW,cCKE6C,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9F,KAAK,SAAA+F,GACjCA,EAAaC,iCEnInB,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAzC,GAAA,iFCRAgD,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.23a9f8a7.chunk.js","sourcesContent":["import { FixedSizeList as List } from 'react-window'\r\nimport React, { Component } from 'react';\r\nimport { pdfjs, Document, Page } from 'react-pdf';\r\nimport Measure from 'react-measure'\r\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\r\npdfjs.GlobalWorkerOptions.workerSrc = 'pdf.worker.js'\r\n\r\n\r\nconst options = {\r\n  cMapUrl: 'cmaps/',\r\n  cMapPacked: true,\r\n};\r\n\r\nexport default class PdfViewer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            pdf: null,\r\n            numPages: null,\r\n            width: 0,\r\n            height: 0,\r\n            itemScale: 0,\r\n            loaded: false\r\n        }\r\n    }\r\n\r\n\r\n  onDocumentLoadSuccess = (pdf) => {\r\n    const promise = pdf.getPage(1)\r\n    promise.then(page => {\r\n        const viewport = page.getViewport(1);\r\n        this.setState({ \r\n            numPages: pdf.numPages,\r\n            itemScale: viewport.height/viewport.width,\r\n            loaded: true,\r\n        });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Measure\r\n            bounds\r\n            onResize={contentRect => {\r\n                this.setState({\r\n                    width: contentRect.bounds.width,\r\n                    height: contentRect.bounds.height,\r\n                })\r\n            }}\r\n        >\r\n        {({measureRef}) => (\r\n        <div \r\n            className=\"viewer\" \r\n            style={{width: \"100%\", height: \"100%\", display: \"block\", position: \"absolute\"}}\r\n            ref={measureRef}\r\n        >\r\n        <div className=\"document_container\">\r\n          <Document\r\n            file={this.props.file}\r\n            onLoadSuccess={this.onDocumentLoadSuccess}\r\n            options={options}\r\n            noData=\"\"\r\n            loading=\"\"\r\n          >\r\n            {this.state.loaded ? \r\n                <List\r\n                    height={this.state.height}\r\n                    width={this.state.width}\r\n                    itemSize={this.state.itemScale * this.state.width}\r\n                    itemCount={this.state.numPages}\r\n                >\r\n                    {({ style, index }) => (\r\n                        <div style={style}>\r\n                            <Page\r\n                                pageNumber={index + 1}\r\n                                width={this.state.width}\r\n                                renderAnnotationLayer={false}\r\n                                loading=\"\"\r\n                            ></Page>\r\n                        </div>\r\n                    )}\r\n                </List>:\r\n            null}\r\n          </Document>\r\n        </div>\r\n        </div>\r\n        )}\r\n        </Measure>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport SplitPane from 'react-split-pane'\r\nimport PdfViewer from './PdfViewer';\r\nimport _ from 'lodash'\r\n\r\nclass Viewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      split: \"\",\r\n      size: \"50%\",\r\n      resizerStyle: \"\",\r\n      allowResize: true,\r\n      close: 0,\r\n      lr: \"\",\r\n      file: null,\r\n    };\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    if (this.props.file !== null) {\r\n      this.setState(() => ({\r\n        file: this.props.file\r\n      }))\r\n    }\r\n  }\r\n\r\n  vSplit = () => {\r\n    this.setState(() => ({ \r\n      split: \"vertical\",\r\n    }));\r\n  }\r\n  \r\n  hSplit = () => {\r\n    this.setState(() => ({ \r\n      split: \"horizontal\",\r\n    }));\r\n  }\r\n\r\n  lClose = () => {\r\n    if (this.state.close >= 1) {\r\n      this.props.handle()\r\n    }\r\n    this.setState((state) => ({\r\n      size: \"0%\",\r\n      allowResize: false,\r\n      resizerStyle: {\r\n        display: \"none\"\r\n      },\r\n      lr: \"left\",\r\n      close: state.close + 1\r\n    }));\r\n  }\r\n\r\n  rClose = () => {\r\n    if (this.state.close >= 1) {\r\n      this.props.handle()\r\n    } \r\n    this.setState((state) => ({\r\n      size: \"100%\",\r\n      allowResize: false,\r\n      resizerStyle: {\r\n        display: \"none\"\r\n      },\r\n      lr: \"right\",\r\n      close: state.close + 1\r\n    }));\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      file: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const id = _.uniqueId();\r\n    return (\r\n        <div>\r\n        {this.state.split === \"\" ? \r\n          <div>\r\n            <div style={{background: \"white\", textAlign: \"center\"}}>\r\n              <button onClick={this.vSplit} style={{background: \"gainsboro\"}}></button>\r\n              <button onClick={this.hSplit} style={{background: \"#gainsboro\"}}></button>\r\n              <button onClick={this.props.close} style={{background: \"gainsboro\"}}></button>\r\n              <input\r\n                type=\"file\"\r\n                onChange={this.onFileChange}\r\n                style={{display: \"none\"}}\r\n                id={id}\r\n              />\r\n              <label htmlFor={id} style={{background: \"gainsboro\"}}></label>\r\n            </div>\r\n            <PdfViewer \r\n              file={this.state.file}\r\n            ></PdfViewer>\r\n          </div>:\r\n          <SplitPane \r\n            split={this.state.split} \r\n            size={this.state.size}\r\n            resizerStyle={this.state.resizerStyle}\r\n            paneStyle={{background: \"white\"}}\r\n            pane2Style={this.state.split === \"vertical\" ? {width: \"0%\"} : null}\r\n            allowResize={this.state.allowResize}\r\n            onDragFinished={this.update}\r\n          >\r\n            {this.state.lr === \"left\" ? <div></div>: \r\n            <div style={{flex: 1}}>\r\n              <Viewer\r\n                close={this.lClose}\r\n                handle={this.rClose}\r\n                file={this.state.file}\r\n              ></Viewer>\r\n            </div>}\r\n            {this.state.lr === \"right\" ? <div></div>: \r\n            <Viewer\r\n              close={this.rClose}\r\n              handle={this.lClose}\r\n              file={this.state.file}\r\n            ></Viewer>}\r\n          </SplitPane>}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Viewer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Viewer from './Viewer.js'\nimport PdfViewer from './PdfViewer.js'\nimport * as mousetrap from 'mousetrap'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      width: 0,\n      height: 0,\n      close: false,\n    }\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  handle = () => {\n  }\n\n  render() {\n    return (\n      <div>\n      {this.state.close ? null :\n      <Viewer \n        handle={this.handle}\n        height={this.state.height}\n        pageIndex={0}\n        file={null}\n      ></Viewer>}\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 30;","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}