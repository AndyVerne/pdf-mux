{"version":3,"sources":["PdfViewer.js","Viewer.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync","logo.svg"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","options","cMapUrl","cMapPacked","PdfViewer","state","numPages","onDocumentLoadSuccess","_ref","_this","setState","_this2","this","react_default","a","createElement","className","style","overflow","height","display","position","entry","file","props","onLoadSuccess","noData","loading","Array","from","el","index","key","concat","pageNumber","width","Component","Viewer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","vSplit","split","hSplit","lClose","close","handle","size","allowResize","resizerStyle","lr","rClose","onFileChange","event","target","files","dimensions","id","_","uniqueId","dist_index_esm","bounds","onResize","contentRect","measureRef","ref","background","textAlign","onClick","type","onChange","htmlFor","PdfViewer_PdfViewer","index_esm","paneStyle","pane2Style","flex","App","increment","count","console","log","decrement","updateWindowDimensions","bind","assertThisInitialized","window","addEventListener","removeEventListener","innerWidth","innerHeight","src_Viewer","pageIndex","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9f00cc95.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { pdfjs, Document, Page } from 'react-pdf';\r\nimport _ from \"lodash\"\r\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\r\npdfjs.GlobalWorkerOptions.workerSrc = 'pdf.worker.js'\r\n\r\n\r\nconst options = {\r\n  cMapUrl: 'cmaps/',\r\n  cMapPacked: true,\r\n};\r\n\r\nexport default class PdfViewer extends Component {\r\n  state = {\r\n    numPages: null,\r\n  }\r\n\r\n\r\n  onDocumentLoadSuccess = ({ numPages }) => {\r\n    this.setState({ numPages });\r\n  }\r\n\r\n  render() {\r\n    const { numPages } = this.state;\r\n\r\n    return (\r\n      <div className=\"viewer\" style={{overflow: \"scroll\", height: \"100%\", display: \"block\", position: \"absolute\"}}>\r\n        <div className=\"document_container\">\r\n          <Document\r\n            file={this.props.file}\r\n            onLoadSuccess={this.onDocumentLoadSuccess}\r\n            options={options}\r\n            noData=\"\"\r\n            loading=\"\"\r\n          >\r\n            {\r\n              Array.from(\r\n                new Array(numPages),\r\n                (el, index) => (\r\n                  <Page\r\n                    key={`page_${index + 1}`}\r\n                    pageNumber={index + 1}\r\n                    width={this.props.width}\r\n                    loading=\"\"\r\n                  />\r\n                ),\r\n              )\r\n            }\r\n          </Document>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}","import React, { Component } from 'react';\r\nimport SplitPane from 'react-split-pane'\r\nimport PdfViewer from './PdfViewer';\r\nimport Measure from 'react-measure'\r\nimport _ from 'lodash'\r\nimport { hidden, gray } from 'ansi-colors';\r\n\r\nclass Viewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      split: \"\",\r\n      size: \"50%\",\r\n      resizerStyle: \"\",\r\n      allowResize: true,\r\n      close: 0,\r\n      lr: \"\",\r\n      dimensions: {\r\n        width: -1,\r\n        height: -1,\r\n      },\r\n      file: null,\r\n    };\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    if (this.props.file !== null) {\r\n      this.setState(() => ({\r\n        file: this.props.file\r\n      }))\r\n    }\r\n  }\r\n\r\n  vSplit = () => {\r\n    this.setState(() => ({ \r\n      split: \"vertical\",\r\n    }));\r\n  }\r\n  \r\n  hSplit = () => {\r\n    this.setState(() => ({ \r\n      split: \"horizontal\",\r\n    }));\r\n  }\r\n\r\n  lClose = () => {\r\n    if (this.state.close >= 1) {\r\n      this.props.handle()\r\n    }\r\n    this.setState((state) => ({\r\n      size: \"0%\",\r\n      allowResize: false,\r\n      resizerStyle: {\r\n        display: \"none\"\r\n      },\r\n      lr: \"left\",\r\n      close: state.close + 1\r\n    }));\r\n  }\r\n\r\n  rClose = () => {\r\n    if (this.state.close >= 1) {\r\n      this.props.handle()\r\n    } \r\n    this.setState((state) => ({\r\n      size: \"100%\",\r\n      allowResize: false,\r\n      resizerStyle: {\r\n        display: \"none\"\r\n      },\r\n      lr: \"right\",\r\n      close: state.close + 1\r\n    }));\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      file: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const id = _.uniqueId();\r\n    return (\r\n      <Measure\r\n        bounds\r\n        onResize={contentRect => {\r\n          this.setState({ dimensions: contentRect.bounds})\r\n        }}\r\n      >\r\n      {({ measureRef }) => (\r\n        <div>\r\n        {this.state.split === \"\" ? \r\n          <div ref={measureRef}>\r\n            <div style={{background: \"white\", textAlign: \"center\"}}>\r\n              <button onClick={this.vSplit} style={{background: \"gainsboro\"}}></button>\r\n              <button onClick={this.hSplit} style={{background: \"#gainsboro\"}}></button>\r\n              <button onClick={this.props.close} style={{background: \"gainsboro\"}}></button>\r\n              <input\r\n                type=\"file\"\r\n                onChange={this.onFileChange}\r\n                style={{display: \"none\"}}\r\n                id={id}\r\n              />\r\n              <label htmlFor={id} style={{background: \"gainsboro\"}}></label>\r\n            </div>\r\n            <PdfViewer \r\n              file={this.state.file}\r\n              width={this.state.dimensions.width}\r\n            ></PdfViewer>\r\n          </div>:\r\n          <SplitPane \r\n            split={this.state.split} \r\n            size={this.state.size}\r\n            resizerStyle={this.state.resizerStyle}\r\n            paneStyle={{background: \"white\"}}\r\n            pane2Style={this.state.split === \"vertical\" ? {width: \"0%\"} : null}\r\n            allowResize={this.state.allowResize}>\r\n            {this.state.lr === \"left\" ? <div></div>: \r\n            <div style={{flex: 1}}>\r\n              <Viewer\r\n                close={this.lClose}\r\n                handle={this.rClose}\r\n                height={this.state.split === \"vertical\" ? this.props.height : this.props.height * 0.5 }\r\n                file={this.state.file}\r\n              ></Viewer>\r\n            </div>}\r\n            {this.state.lr === \"right\" ? <div></div>: \r\n            <Viewer\r\n              close={this.rClose}\r\n              handle={this.lClose}\r\n              height={this.state.split === \"vertical\" ? this.props.height : this.props.height * 0.5 }\r\n              file={this.state.file}\r\n            ></Viewer>}\r\n          </SplitPane>}\r\n        </div>\r\n      )}\r\n      </Measure>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Viewer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Viewer from './Viewer.js'\nimport PdfViewer from './PdfViewer.js'\nimport * as mousetrap from 'mousetrap'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      width: 0,\n      height: 0,\n      close: false,\n    }\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  handle = () => {\n  }\n\n  increment = () => {\n    this.setState((state) => ({\n      count: state.count + 1\n    }));\n    console.log(this.state.count)\n  }\n\n  decrement = () => {\n    if (this.state.count > 1) {\n      this.setState((state) => ({\n        count: state.count - 1\n      }));\n    }\n    console.log(this.state.count)\n  }\n\n  render() {\n    return (\n      <div>\n      {this.state.close ? null :\n      <Viewer \n        handle={this.handle}\n        height={this.state.height}\n        pageIndex={0}\n        file={null}\n        increment={this.increment}\n        decrement={this.decrement}\n        count={this.state.count}\n      ></Viewer>}\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 27;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}