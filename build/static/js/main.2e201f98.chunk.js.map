{"version":3,"sources":["PdfViewer.js","Viewer.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync","logo.svg"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","options","cMapUrl","cMapPacked","PdfViewer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDocumentLoadSuccess","pdf","getPage","then","page","viewport","getViewport","getNumPages","numPages","setPage","listRef","React","createRef","setState","itemScale","height","width","loaded","updateCurrentVisiblePage","_ref","visibleStopIndex","state","currentPage","getCurrentPage","current","scrollToItem","componentDidUpdate","componentWillUnmount","destroy","console","log","nextProps","nextState","file","_this2","react_default","a","createElement","react_measure_dist_index_esm","bounds","onResize","contentRect","_ref2","measureRef","className","style","display","position","ref","entry","onLoadSuccess","noData","loading","dist_index_esm","itemSize","itemCount","onItemsRendered","overscanCount","_ref3","index","key","pageNumber","renderAnnotationLayer","Component","Viewer","cachePage","localStorage","setItem","value","toString","onFileChange","event","target","files","parseInt","getItem","isNaN","componentWillMount","vSplit","split","hSplit","lClose","close","handle","size","allowResize","resizerStyle","lr","rClose","keyCode","NaN","window","id","_","uniqueId","Beforeunload_default","onBeforeunload","background","justifyContent","marginRight","marginLeft","visibility","onClick","type","onChange","htmlFor","textAlign","color","fontSize","placeholder","e","onKeyDown","PdfViewer_PdfViewer","index_esm","paneStyle","pane2Style","onDragFinished","update","flex","App","src_Viewer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","Error","code","keys","resolve","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2e201f98.chunk.js","sourcesContent":["import { FixedSizeList as List } from \"react-window\";\r\nimport React, { Component } from \"react\";\r\nimport { pdfjs, Document, Page } from \"react-pdf\";\r\nimport Measure from \"react-measure\";\r\nimport \"react-pdf/dist/Page/AnnotationLayer.css\";\r\npdfjs.GlobalWorkerOptions.workerSrc = \"pdf.worker.js\";\r\n\r\nconst options = {\r\n  cMapUrl: \"cmaps/\",\r\n  cMapPacked: true\r\n};\r\n\r\nexport default class PdfViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pdf: null,\r\n      width: 0,\r\n      height: 0,\r\n      itemScale: 0,\r\n      loaded: false,\r\n      numPages: null,\r\n      currentPage: 0\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.file !== nextProps.file || this.state.loaded === false) {\r\n      this.state.currentPage = 0;\r\n      this.state.loaded = false;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  onDocumentLoadSuccess = pdf => {\r\n    const promise = pdf.getPage(1);\r\n    promise.then(page => {\r\n      const viewport = page.getViewport(1);\r\n      this.props.getNumPages(pdf.numPages);\r\n      this.props.setPage(this.setPage);\r\n      this.listRef = React.createRef();\r\n      this.setState({\r\n        pdf,\r\n        numPages: pdf.numPages,\r\n        itemScale: viewport.height / viewport.width,\r\n        loaded: true\r\n      });\r\n    });\r\n  };\r\n\r\n  updateCurrentVisiblePage = ({ visibleStopIndex }) => {\r\n    if (this.state.loaded === true && this.state.currentPage !== 0) {\r\n      this.state.currentPage = visibleStopIndex + 1;\r\n      this.props.getCurrentPage(this.state.currentPage);\r\n    }\r\n  };\r\n\r\n  setPage = page => {\r\n    this.state.currentPage = page;\r\n    this.props.getCurrentPage(this.state.currentPage);\r\n    this.listRef.current.scrollToItem(page - 1, \"start\");\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    if (this.state.loaded === true && this.state.currentPage === 0) {\r\n      this.setPage(this.props.currentPage);\r\n    }\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    this.state.pdf.destroy()\r\n    console.log('unmout pdf')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Measure\r\n        bounds\r\n        onResize={contentRect => {\r\n          this.setState({\r\n            width: contentRect.bounds.width,\r\n            height: contentRect.bounds.height\r\n          });\r\n        }}\r\n      >\r\n        {({ measureRef }) => (\r\n          <div\r\n            className=\"viewer\"\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              display: \"block\",\r\n              position: \"absolute\"\r\n            }}\r\n            ref={measureRef}\r\n          >\r\n            <div className=\"document_container\">\r\n              <Document\r\n                file={this.props.file}\r\n                onLoadSuccess={this.onDocumentLoadSuccess}\r\n                options={options}\r\n                noData=\"\"\r\n                loading=\"\"\r\n              >\r\n                {this.state.loaded ? (\r\n                  <List\r\n                    ref={this.listRef}\r\n                    height={this.state.height}\r\n                    width={this.state.width}\r\n                    itemSize={this.state.itemScale * this.state.width}\r\n                    itemCount={this.state.numPages}\r\n                    onItemsRendered={this.updateCurrentVisiblePage}\r\n                    overscanCount={1}\r\n                  >\r\n                    {({ style, index }) => (\r\n                      <div style={style} key={index}>\r\n                        <Page\r\n                          pageNumber={index + 1}\r\n                          width={this.state.width - 10}\r\n                          renderAnnotationLayer={false}\r\n                          loading=\"\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </List>\r\n                ) : null}\r\n              </Document>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Measure>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport PdfViewer from \"./PdfViewer\";\r\nimport Beforeunload from \"react-beforeunload\";\r\nimport _ from \"lodash\";\r\n\r\nclass Viewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      //split states\r\n      split: \"\",\r\n      size: \"50%\",\r\n      resizerStyle: \"\",\r\n      allowResize: true,\r\n      close: 0,\r\n      lr: \"\",\r\n      //file states\r\n      file: null,\r\n      value: \"none\",\r\n      currentPage: 0,\r\n      numPages: 0,\r\n      page: \"\",\r\n      setPage: null\r\n    };\r\n    this.localStorage = window.localStorage;\r\n  }\r\n\r\n  cachePage = () => {\r\n    this.localStorage.setItem(this.state.value, this.state.currentPage.toString());\r\n    console.log(\"cached\");\r\n  };\r\n\r\n  onFileChange = event => {\r\n    this.cachePage();\r\n    const file = event.target.files[0];\r\n    if (file !== null) {\r\n      const value = event.target.value;\r\n      const currentPage = parseInt(this.localStorage.getItem(value));\r\n      this.setState({\r\n        file,\r\n        value,\r\n        currentPage: isNaN(currentPage) ? 1 : currentPage\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.setState(() => ({\r\n      file: this.props.file !== null ? this.props.file : null,\r\n      value: this.props.value !== \"none\" ? this.props.value : \"none\",\r\n      currentPage: this.props.currentPage !== 0 ? this.props.currentPage : 0\r\n    }));\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    this.cachePage();\r\n    console.log('unmount viewer')\r\n  };\r\n\r\n  vSplit = () => {\r\n    this.setState(() => ({\r\n      split: \"vertical\"\r\n    }));\r\n  };\r\n\r\n  hSplit = () => {\r\n    this.setState(() => ({\r\n      split: \"horizontal\"\r\n    }));\r\n  };\r\n\r\n  lClose = () => {\r\n    if (this.state.close >= 1) {\r\n      this.props.handle();\r\n    }\r\n    this.setState(state => ({\r\n      size: \"0%\",\r\n      allowResize: false,\r\n      resizerStyle: {\r\n        display: \"none\"\r\n      },\r\n      lr: \"left\",\r\n      close: state.close + 1\r\n    }));\r\n  };\r\n\r\n  rClose = () => {\r\n    if (this.state.close >= 1) {\r\n      this.props.handle();\r\n    }\r\n    this.setState(state => ({\r\n      size: \"100%\",\r\n      allowResize: false,\r\n      resizerStyle: {\r\n        display: \"none\"\r\n      },\r\n      lr: \"right\",\r\n      close: state.close + 1\r\n    }));\r\n  };\r\n\r\n  getNumPages = numPages => {\r\n    this.setState({\r\n      numPages\r\n    });\r\n  };\r\n\r\n  getCurrentPage = currentPage => {\r\n    if (currentPage !== this.state.currentPage) {\r\n      this.setState({\r\n        currentPage\r\n      });\r\n    }\r\n  };\r\n\r\n  getPage = event => {\r\n    if (event.keyCode === 13) {\r\n      const page = parseInt(this.state.page);\r\n      if (page !== NaN && page > 0 && page <= this.state.numPages) {\r\n        this.state.setPage(page);\r\n      }\r\n      this.setState({\r\n        page: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  setPage = setPage => {\r\n    this.setState({\r\n      setPage \r\n    })\r\n  };\r\n\r\n  render() {\r\n    const id = _.uniqueId();\r\n    return (\r\n      <div>\r\n        <Beforeunload\r\n          onBeforeunload={() => {\r\n            this.cachePage();\r\n          }}\r\n        />\r\n        {this.state.split === \"\" ? (\r\n          <div>\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                background: \"#white\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\"\r\n              }}\r\n            >\r\n              <button style={{ marginRight: \"auto\", marginLeft: \"20px\", visibility: \"hidden\" }} />\r\n              <button onClick={this.vSplit} />\r\n              <button onClick={this.hSplit} />\r\n              <button onClick={this.props.close} />\r\n              <input\r\n                type=\"file\"\r\n                onChange={this.onFileChange}\r\n                style={{ display: \"none\" }}\r\n                id={id}\r\n              />\r\n              <label htmlFor={id} />\r\n              <div style={{ marginLeft: \"auto\" }}>\r\n                <div\r\n                  style={{\r\n                    marginRight: \"20px\",\r\n                    textAlign: \"right\",\r\n                    color: \"gray\",\r\n                    fontSize: \"14px\"\r\n                  }}\r\n                >\r\n                  <input\r\n                    type=\"text\"\r\n                    style={{ width: \"30px\" }}\r\n                    value={this.state.page}\r\n                    placeholder={this.state.currentPage}\r\n                    onChange={e => this.setState({ page: e.target.value })}\r\n                    onKeyDown={this.getPage}\r\n                  />\r\n                  ({this.state.currentPage} of {this.state.numPages})\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <PdfViewer\r\n              file={this.state.file}\r\n              currentPage={this.state.currentPage}\r\n              getNumPages={this.getNumPages}\r\n              getCurrentPage={this.getCurrentPage}\r\n              setPage={this.setPage}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <SplitPane\r\n            split={this.state.split}\r\n            size={this.state.size}\r\n            resizerStyle={this.state.resizerStyle}\r\n            paneStyle={{ background: \"white\" }}\r\n            pane2Style={\r\n              this.state.split === \"vertical\" ? { width: \"0%\" } : null\r\n            }\r\n            allowResize={this.state.allowResize}\r\n            onDragFinished={this.update}\r\n          >\r\n            {this.state.lr === \"left\" ? (\r\n              <div />\r\n            ) : (\r\n              <div style={{ flex: 1 }}>\r\n                <Viewer\r\n                  close={this.lClose}\r\n                  handle={this.rClose}\r\n                  file={this.state.file}\r\n                  value={this.state.value}\r\n                  currentPage={this.state.currentPage}\r\n                />\r\n              </div>\r\n            )}\r\n            {this.state.lr === \"right\" ? (\r\n              <div />\r\n            ) : (\r\n              <Viewer\r\n                close={this.rClose}\r\n                handle={this.lClose}\r\n                file={this.state.file}\r\n                value={this.state.value}\r\n                currentPage={this.state.currentPage}\r\n              />\r\n            )}\r\n          </SplitPane>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Viewer;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Viewer from \"./Viewer.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      close: false\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.close ? null : (\n          <Viewer\n            handle={() => {}}\n            file={null}\n            value={\"none\"}\n            currentPage={0}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 29;","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}